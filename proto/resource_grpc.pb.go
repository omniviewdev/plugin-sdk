// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/resource.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ResourcePlugin_LoadConnections_FullMethodName      = "/com.omniview.pluginsdk.ResourcePlugin/LoadConnections"
	ResourcePlugin_ListConnections_FullMethodName      = "/com.omniview.pluginsdk.ResourcePlugin/ListConnections"
	ResourcePlugin_GetConnection_FullMethodName        = "/com.omniview.pluginsdk.ResourcePlugin/GetConnection"
	ResourcePlugin_UpdateConnection_FullMethodName     = "/com.omniview.pluginsdk.ResourcePlugin/UpdateConnection"
	ResourcePlugin_DeleteConnection_FullMethodName     = "/com.omniview.pluginsdk.ResourcePlugin/DeleteConnection"
	ResourcePlugin_Get_FullMethodName                  = "/com.omniview.pluginsdk.ResourcePlugin/Get"
	ResourcePlugin_List_FullMethodName                 = "/com.omniview.pluginsdk.ResourcePlugin/List"
	ResourcePlugin_Find_FullMethodName                 = "/com.omniview.pluginsdk.ResourcePlugin/Find"
	ResourcePlugin_Create_FullMethodName               = "/com.omniview.pluginsdk.ResourcePlugin/Create"
	ResourcePlugin_Update_FullMethodName               = "/com.omniview.pluginsdk.ResourcePlugin/Update"
	ResourcePlugin_Delete_FullMethodName               = "/com.omniview.pluginsdk.ResourcePlugin/Delete"
	ResourcePlugin_StartContextInformer_FullMethodName = "/com.omniview.pluginsdk.ResourcePlugin/StartContextInformer"
	ResourcePlugin_StopContextInformer_FullMethodName  = "/com.omniview.pluginsdk.ResourcePlugin/StopContextInformer"
	ResourcePlugin_ListenForEvents_FullMethodName      = "/com.omniview.pluginsdk.ResourcePlugin/ListenForEvents"
)

// ResourcePluginClient is the client API for ResourcePlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourcePluginClient interface {
	LoadConnections(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LoadConnectionsResponse, error)
	ListConnections(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListConnectionsResponse, error)
	GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*Connection, error)
	UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*UpdateConnectionResponse, error)
	DeleteConnection(ctx context.Context, in *DeleteConnectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	StartContextInformer(ctx context.Context, in *StartContextInformerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StopContextInformer(ctx context.Context, in *StopContextInformerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListenForEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ResourcePlugin_ListenForEventsClient, error)
}

type resourcePluginClient struct {
	cc grpc.ClientConnInterface
}

func NewResourcePluginClient(cc grpc.ClientConnInterface) ResourcePluginClient {
	return &resourcePluginClient{cc}
}

func (c *resourcePluginClient) LoadConnections(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LoadConnectionsResponse, error) {
	out := new(LoadConnectionsResponse)
	err := c.cc.Invoke(ctx, ResourcePlugin_LoadConnections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcePluginClient) ListConnections(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListConnectionsResponse, error) {
	out := new(ListConnectionsResponse)
	err := c.cc.Invoke(ctx, ResourcePlugin_ListConnections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcePluginClient) GetConnection(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*Connection, error) {
	out := new(Connection)
	err := c.cc.Invoke(ctx, ResourcePlugin_GetConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcePluginClient) UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*UpdateConnectionResponse, error) {
	out := new(UpdateConnectionResponse)
	err := c.cc.Invoke(ctx, ResourcePlugin_UpdateConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcePluginClient) DeleteConnection(ctx context.Context, in *DeleteConnectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ResourcePlugin_DeleteConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcePluginClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, ResourcePlugin_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcePluginClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, ResourcePlugin_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcePluginClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error) {
	out := new(FindResponse)
	err := c.cc.Invoke(ctx, ResourcePlugin_Find_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcePluginClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, ResourcePlugin_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcePluginClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, ResourcePlugin_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcePluginClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, ResourcePlugin_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcePluginClient) StartContextInformer(ctx context.Context, in *StartContextInformerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ResourcePlugin_StartContextInformer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcePluginClient) StopContextInformer(ctx context.Context, in *StopContextInformerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ResourcePlugin_StopContextInformer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcePluginClient) ListenForEvents(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ResourcePlugin_ListenForEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ResourcePlugin_ServiceDesc.Streams[0], ResourcePlugin_ListenForEvents_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &resourcePluginListenForEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ResourcePlugin_ListenForEventsClient interface {
	Recv() (*InformerEvent, error)
	grpc.ClientStream
}

type resourcePluginListenForEventsClient struct {
	grpc.ClientStream
}

func (x *resourcePluginListenForEventsClient) Recv() (*InformerEvent, error) {
	m := new(InformerEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ResourcePluginServer is the server API for ResourcePlugin service.
// All implementations should embed UnimplementedResourcePluginServer
// for forward compatibility
type ResourcePluginServer interface {
	LoadConnections(context.Context, *emptypb.Empty) (*LoadConnectionsResponse, error)
	ListConnections(context.Context, *emptypb.Empty) (*ListConnectionsResponse, error)
	GetConnection(context.Context, *GetConnectionRequest) (*Connection, error)
	UpdateConnection(context.Context, *UpdateConnectionRequest) (*UpdateConnectionResponse, error)
	DeleteConnection(context.Context, *DeleteConnectionRequest) (*emptypb.Empty, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	Find(context.Context, *FindRequest) (*FindResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	StartContextInformer(context.Context, *StartContextInformerRequest) (*emptypb.Empty, error)
	StopContextInformer(context.Context, *StopContextInformerRequest) (*emptypb.Empty, error)
	ListenForEvents(*emptypb.Empty, ResourcePlugin_ListenForEventsServer) error
}

// UnimplementedResourcePluginServer should be embedded to have forward compatible implementations.
type UnimplementedResourcePluginServer struct {
}

func (UnimplementedResourcePluginServer) LoadConnections(context.Context, *emptypb.Empty) (*LoadConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadConnections not implemented")
}
func (UnimplementedResourcePluginServer) ListConnections(context.Context, *emptypb.Empty) (*ListConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnections not implemented")
}
func (UnimplementedResourcePluginServer) GetConnection(context.Context, *GetConnectionRequest) (*Connection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnection not implemented")
}
func (UnimplementedResourcePluginServer) UpdateConnection(context.Context, *UpdateConnectionRequest) (*UpdateConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnection not implemented")
}
func (UnimplementedResourcePluginServer) DeleteConnection(context.Context, *DeleteConnectionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnection not implemented")
}
func (UnimplementedResourcePluginServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedResourcePluginServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedResourcePluginServer) Find(context.Context, *FindRequest) (*FindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedResourcePluginServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedResourcePluginServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedResourcePluginServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedResourcePluginServer) StartContextInformer(context.Context, *StartContextInformerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartContextInformer not implemented")
}
func (UnimplementedResourcePluginServer) StopContextInformer(context.Context, *StopContextInformerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopContextInformer not implemented")
}
func (UnimplementedResourcePluginServer) ListenForEvents(*emptypb.Empty, ResourcePlugin_ListenForEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenForEvents not implemented")
}

// UnsafeResourcePluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourcePluginServer will
// result in compilation errors.
type UnsafeResourcePluginServer interface {
	mustEmbedUnimplementedResourcePluginServer()
}

func RegisterResourcePluginServer(s grpc.ServiceRegistrar, srv ResourcePluginServer) {
	s.RegisterService(&ResourcePlugin_ServiceDesc, srv)
}

func _ResourcePlugin_LoadConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcePluginServer).LoadConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourcePlugin_LoadConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcePluginServer).LoadConnections(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcePlugin_ListConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcePluginServer).ListConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourcePlugin_ListConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcePluginServer).ListConnections(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcePlugin_GetConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcePluginServer).GetConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourcePlugin_GetConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcePluginServer).GetConnection(ctx, req.(*GetConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcePlugin_UpdateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcePluginServer).UpdateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourcePlugin_UpdateConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcePluginServer).UpdateConnection(ctx, req.(*UpdateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcePlugin_DeleteConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcePluginServer).DeleteConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourcePlugin_DeleteConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcePluginServer).DeleteConnection(ctx, req.(*DeleteConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcePlugin_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcePluginServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourcePlugin_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcePluginServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcePlugin_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcePluginServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourcePlugin_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcePluginServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcePlugin_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcePluginServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourcePlugin_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcePluginServer).Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcePlugin_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcePluginServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourcePlugin_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcePluginServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcePlugin_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcePluginServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourcePlugin_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcePluginServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcePlugin_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcePluginServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourcePlugin_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcePluginServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcePlugin_StartContextInformer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartContextInformerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcePluginServer).StartContextInformer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourcePlugin_StartContextInformer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcePluginServer).StartContextInformer(ctx, req.(*StartContextInformerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcePlugin_StopContextInformer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopContextInformerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcePluginServer).StopContextInformer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResourcePlugin_StopContextInformer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcePluginServer).StopContextInformer(ctx, req.(*StopContextInformerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourcePlugin_ListenForEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResourcePluginServer).ListenForEvents(m, &resourcePluginListenForEventsServer{stream})
}

type ResourcePlugin_ListenForEventsServer interface {
	Send(*InformerEvent) error
	grpc.ServerStream
}

type resourcePluginListenForEventsServer struct {
	grpc.ServerStream
}

func (x *resourcePluginListenForEventsServer) Send(m *InformerEvent) error {
	return x.ServerStream.SendMsg(m)
}

// ResourcePlugin_ServiceDesc is the grpc.ServiceDesc for ResourcePlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourcePlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.omniview.pluginsdk.ResourcePlugin",
	HandlerType: (*ResourcePluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadConnections",
			Handler:    _ResourcePlugin_LoadConnections_Handler,
		},
		{
			MethodName: "ListConnections",
			Handler:    _ResourcePlugin_ListConnections_Handler,
		},
		{
			MethodName: "GetConnection",
			Handler:    _ResourcePlugin_GetConnection_Handler,
		},
		{
			MethodName: "UpdateConnection",
			Handler:    _ResourcePlugin_UpdateConnection_Handler,
		},
		{
			MethodName: "DeleteConnection",
			Handler:    _ResourcePlugin_DeleteConnection_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ResourcePlugin_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ResourcePlugin_List_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _ResourcePlugin_Find_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ResourcePlugin_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ResourcePlugin_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ResourcePlugin_Delete_Handler,
		},
		{
			MethodName: "StartContextInformer",
			Handler:    _ResourcePlugin_StartContextInformer_Handler,
		},
		{
			MethodName: "StopContextInformer",
			Handler:    _ResourcePlugin_StopContextInformer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenForEvents",
			Handler:       _ResourcePlugin_ListenForEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/resource.proto",
}
